(define (delete-duplicates l)
  (cond ((null? l) '())
        ((memq (car l) (cdr l)) (delete-duplicates (cdr l)))
        (else (cons (car l) (delete-duplicates (cdr l))))
        )
  )

(define global-map '())

(define (register keys action)
  (define (loop getmap setmap keys)
    (if (null? keys)
        (setmap action)
        (let ((k (car keys)))
          (if (eq? #f (assoc k (getmap)))
              (setmap (assoc-set! (getmap) k '())))
          (loop (lambda () (cdr (assoc k (getmap))))
                (lambda (m) (setmap (assoc-set! (getmap) k m)))
                (cdr keys))
          )
        )
    )
  (loop (lambda () global-map) (lambda (m) (set! global-map m)) keys)
  )

(define (grab keymap)
  (define (proc k)
    (define action (cdr (assoc k keymap)))
    (ungrab-all-keys)
    (remove-all-keys)
    (if (string? action)
        (begin
          (run-command action)
          (reset-first-binding)
          )
        (grab action)
        )
    (grab-all-keys)
    )
  (map (lambda (k)
         (xbindkey-function k (lambda () (proc k)))
         ) (delete-duplicates (map car keymap)))
  (if (not (eq? global-map keymap))
      (xbindkey-function '(control g) (lambda () (reset-first-binding)))
      )
  )

(define (first-binding)
  (grab global-map)
  )

(define (reset-first-binding)
  (ungrab-all-keys)
  (remove-all-keys)
  (first-binding)
  (grab-all-keys))

(define (simple s)
  (string-concatenate `("wmctrl -xa " ,s "||" ,s))
  )

; (register '((control semicolon) v) "wmctrl -xa Vim || gvim")
; (register '((control semicolon) f) (simple "firefox"))
(register '((control semicolon) r) "grun")
(register '((control semicolon) v) "gvim")
(register '((control semicolon) (shift v)) "gvim -c \":cd ~/workspace\"")
(register '((control semicolon) c) "chromium")
(register '((control semicolon) d) "dolphin")
(register '((control semicolon) f) "firefox")
(register '((control semicolon) t) "thunderbird")
(register '((control semicolon) (shift t)) "thunderbird -compose")
(register '((control semicolon) (control q)) "i3-msg kill")
(register '((control semicolon) (control semicolon)) "xdotool key ctrl+semicolon")

(first-binding)
